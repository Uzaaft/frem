# Simplified Linear GraphQL schema for our queries
type Query {
  issues(
    filter: IssueFilter
    first: Int
    after: String
  ): IssueConnection!
  
  issue(id: String!): Issue
  
  viewer: User!
  
  teams: TeamConnection!
}

type Issue {
  id: ID!
  identifier: String!
  title: String!
  description: String
  state: WorkflowState!
  priority: Int!
  assignee: User
  createdAt: DateTime!
  updatedAt: DateTime!
  comments: CommentConnection!
}

type WorkflowState {
  id: ID!
  name: String!
  color: String!
}

type User {
  id: ID!
  name: String!
  email: String!
}

type Team {
  id: ID!
  name: String!
  key: String!
}

type Comment {
  id: ID!
  body: String!
  user: User!
  createdAt: DateTime!
}

type IssueConnection {
  edges: [IssueEdge!]!
  pageInfo: PageInfo!
}

type IssueEdge {
  node: Issue!
  cursor: String!
}

type TeamConnection {
  edges: [TeamEdge!]!
  pageInfo: PageInfo!
}

type TeamEdge {
  node: Team!
  cursor: String!
}

type CommentConnection {
  edges: [CommentEdge!]!
  pageInfo: PageInfo!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input IssueFilter {
  state: StateFilter
  assignee: NullableIDComparator
  team: IDComparator
}

input StateFilter {
  name: StringComparator
}

input StringComparator {
  eq: String
  ne: String
  in: [String!]
}

input NullableIDComparator {
  eq: ID
  null: Boolean
}

input IDComparator {
  eq: ID
  in: [ID!]
}

scalar DateTime